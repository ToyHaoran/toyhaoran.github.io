<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[产出产能平衡]]></title>
    <url>%2F2018%2F12%2F04%2F%E4%BA%A7%E5%87%BA%E4%BA%A7%E8%83%BD%E5%B9%B3%E8%A1%A1%2F</url>
    <content type="text"><![CDATA[请输入密码： Decrypt ]]></content>
      <categories>
        <category>思想</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>思想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[窗口函数的使用]]></title>
    <url>%2F2018%2F11%2F30%2F%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[参考：https://n3xtchen.github.io/n3xtchen/spark/2017/01/24/spark200-window-functionhttps://www.jianshu.com/p/42be8650509f 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118object DataFrameDemo extends App &#123; //1.6后基本上不用sc了，用spark.sparkContext代替 val sc = ConnectUtil.sc val spark = ConnectUtil.spark import spark.implicits._ /* 有些时候需要计算一些排序特征，窗口特征等，如一个店铺的首单特征。 对于这样的特征显然是不能简单通过groupBy操作来完成 即：第一列是订单，第二列是店铺，第三列是支付时间，第四列是价格。 1、统计每个店铺每个订单和前一单的价格和，如果通过groupBy来完成特别费劲。 2、店铺这个订单与前一单的差值，需要自定义聚合函数 还有计算前4秒的平均值、计算环比之类的，都要用到窗口函数。 */ val orders = Seq( ("o1", "s1", "2017-05-01", 100), ("o2", "s1", "2017-05-02", 200), ("o3", "s2", "2017-05-01", 200), ("o4", "s1", "2017-05-03", 200), ("o5", "s2", "2017-05-02", 100), ("o6", "s1", "2017-05-04", 300) ).toDF("order_id", "seller_id", "pay_time", "price") //打印分区信息 orders.printLocation() //店铺订单顺序 val rankSpec = Window.partitionBy("seller_id").orderBy("pay_time") orders.withColumn("rank", dense_rank.over(rankSpec)).show() val rankSpec2 = Window.partitionBy("seller_id").orderBy("price") orders.withColumn("rank2", rank.over(rankSpec2)).show() //1,2,2,4 orders.withColumn("dense_rank2", dense_rank.over(rankSpec2)).show()//1,2,2,3 //定义前一单和本单的窗口 val winSpec = Window.partitionBy("seller_id").orderBy("pay_time").rowsBetween(-1, 0) //店铺这个订单及前一单的价格和 orders.withColumn("sum_pay", sum("price").over(winSpec)).show() //店铺这个订单与前一单的平均值，用UDAF def getAvgUdaf:UserDefinedAggregateFunction = new MyAverage orders.withColumn("avg",getAvgUdaf($"price").over(winSpec)).show() orders.withColumn("avg2", avg("price").over(winSpec)).show() //每个店铺当前订单与前一单的差值,需要自定义聚合函数，或者lag函数 def getMinusUdaf:UserDefinedAggregateFunction = new MyMinus orders.withColumn("rank", dense_rank.over(rankSpec)) .withColumn("prePrice", lag("price", 1).over(rankSpec)) //前一行的值 .withColumn("minus", getMinusUdaf($"price").over(winSpec)) //在前面的基础上用UDF也行 .show() /* lag(field, n): 就是取从当前字段往前第n个值，这里是取前一行的值 first/last(): 提取这个分组特定排序的第一个最后一个，在获取用户退出的时候，你可能会用到 lag/lead(field, n): lead 就是 lag 相反的操作，这个用于做数据回测特别用，结果回推条件 */ //——————————————————————以下为自定义聚合函数UDAF—————————————————————————————————————————————— class MyAverage extends UserDefinedAggregateFunction&#123; //继承抽象函数必须实现以下方法 // 输入参数的数据类型 def inputSchema: StructType = StructType(StructField("value", LongType) :: Nil) // 缓冲区中进行聚合时，所处理的数据的类型 def bufferSchema: StructType = StructType(StructField("count", LongType) :: StructField("sum", DoubleType) :: Nil) // 初始化给定的聚合缓冲区，即聚合缓冲区的零值。 请注意，缓冲区内的数组和映射仍然是不可变的。 def initialize(buffer: MutableAggregationBuffer): Unit = &#123; buffer(0) = 0L //表示次数 buffer(1) = 0.0D //表示总和 &#125; //使用来自input的新输入数据更新给定的聚合缓冲区`buffer`。每个输入行调用一次。 def update(buffer: MutableAggregationBuffer, input: Row): Unit = &#123; if (!input.isNullAt(0)) &#123; buffer(0) = buffer.getLong(0) + 1L //次数加1 buffer(1) = buffer.getDouble(1) + input.getAs[Long](0).toDouble //求和 &#125; &#125; // 此函数是否始终在相同输入上返回相同的输出 def deterministic: Boolean = true // 合并两个聚合缓冲区并将更新的缓冲区值存储回“buffer1”。 // 当我们将两个部分聚合的数据合并在一起时调用此方法。 // Spark是分布式的，所以不同的区需要进行合并。 def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = &#123; buffer1(0) = buffer1.getLong(0) + buffer2.getLong(0) //求次数 buffer1(1) = buffer1.getDouble(1) + buffer2.getDouble(1) //求和 &#125; //计算最终的结果 def evaluate(buffer: Row): Double = &#123; buffer.getDouble(1) / buffer.getLong(0).toDouble &#125; // 返回值的数据类型 def dataType: DataType = DoubleType &#125; class MyMinus extends UserDefinedAggregateFunction&#123; def inputSchema: StructType = StructType(StructField("value", LongType) :: Nil) def bufferSchema: StructType = StructType(StructField("minus", LongType) :: Nil) def initialize(buffer: MutableAggregationBuffer): Unit = &#123; buffer(0) = 0L //表示差值 &#125; def update(buffer: MutableAggregationBuffer, input: Row): Unit = &#123; if (!input.isNullAt(0)) &#123; //输入的后者减去前者 buffer(0) = input.getLong(0) - buffer.getLong(0) &#125; &#125; // 此函数是否始终在相同输入上返回相同的输出 def deterministic: Boolean = true def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = &#123; //分区合并，也是后者减前者 buffer1(0) = buffer2.getLong(0) - buffer1.getLong(0) &#125; //计算最终的结果 def evaluate(buffer: Row): Long = &#123; buffer.getLong(0) &#125; // 返回值的数据类型 def dataType: DataType = LongType &#125; &#125;]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用隐式转换扩展DataFrame和RDD以及其他的对象]]></title>
    <url>%2F2018%2F11%2F30%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%89%A9%E5%B1%95DataFrame%E5%92%8CRDD%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9A%84%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[目的DataFrame可以点出来很多方法，都是DF内置的。 比如说：df.withColumn()，df.printSchema()。 但是如果你想打印df中的分区位置信息，以及每个key有多少记录。怎么才能点出来这个方法呢？ 实现工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package utilsimport org.apache.spark.rdd.RDDimport org.apache.spark.sql._//导入对应的规则类，以免出现警告import scala.language.implicitConversionsobject BaseUtil &#123; /** * DF的装饰类（隐式转换） */ class RichDataFrame(dataFrame: DataFrame)&#123; /** * 用来统计相同key的记录数，常用于调整数据倾斜 */ def printKeyNums(column: Column): Unit =&#123; val map = dataFrame.select(column).rdd.countByValue() println(s"一共$&#123;map.size&#125;个key") for ((key, num) &lt;- map) &#123; println(key + "共有" + num + "条记录") &#125; &#125; def printKeyNums(column: String): Unit =&#123; printKeyNums(dataFrame.col(column)) &#125; /** * 打印分区位置信息 */ def printLocation(): Unit =&#123; println("分区位置信息如下==============") dataFrame.rdd.mapPartitionsWithIndex(printLocationFunc).collect().foreach(println(_)) &#125; &#125; /** * 扩展df的方法，隐式转换 */ implicit def df2RichDF(src: DataFrame): RichDataFrame = new RichDataFrame(src) /** * RDD的装饰类（隐式转换）,不加泛型读取不到 */ class RichRDD(rdd:RDD[_ &lt;: Any])&#123; def printLocation(): Unit =&#123; println("分区位置信息如下==============") rdd.mapPartitionsWithIndex(printLocationFunc).collect().foreach(println(_)) &#125; &#125; /** * 扩展RDD的方法，隐式转换 */ implicit def rdd2RichRDD(src: RDD[_ &lt;: Any]): RichRDD = new RichRDD(src) /** * 打印rdd的分区信息，需要用mapPartitionsWithIndex方法。 * 使用方法：df.rdd.mapPartitionsWithIndex(printLocationFunc).collect().foreach(println(_)) */ def printLocationFunc(index: Int, iter: Iterator[Any]): Iterator[String] = &#123; iter.map(x =&gt; "分区" + index + "：" + x + "") &#125;&#125; 测试工具类1234567891011121314import utils.BaseUtil._object DataFrameDemo extends App &#123; val sc = ConnectUtil.sc val spark = ConnectUtil.spark import spark.implicits._ val df = spark.createDataset(Seq(("aaa", 1, 2), ("bbb", 3, 4), ("bbb", 1, 5), ("bbb", 2, 1), ("ccc", 4, 5), ("bbb", 4, 6))).toDF("key1", "key2", "key3") //测试 df.printKeyNums("key1") df.printKeyNums($"key1") df.printLocation() df.rdd.printLocation()&#125;]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark调优]]></title>
    <url>%2F2018%2F11%2F22%2Fspark%E8%B0%83%E4%BC%98%2F</url>
    <content type="text"><![CDATA[开发调优http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_0S1att3u_Arv2julgO3DfqzJ 资源调优http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1aNUiT0jIkZS2vOo7b2A4zj0 数据倾斜调优http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1Bfyg63sj4Z62ijmli2HNs3A shuffle调优http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_0G6_680iZQjZ2SL00W3Mx2C1 UI界面详解http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_0Z68LH1WJkHy2ZzXL-3sPL0x 常见错误http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_0COQmb073k7328mFz10H6y5g]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件基本操作]]></title>
    <url>%2F2018%2F11%2F18%2F%E8%BD%AF%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[此文件用来存放为知笔记中的软件基本操作，因为Hexo更新起来太麻烦，所以在这里只保存网址。 Wiz笔记基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_2G5fl23tBkJf2-yhOs0NQAvm GitHub高效利用http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_2xbFqV2d84ar2shT470Q0_00 IDEA基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_2JaDdJ1qykdj2so27N2QbLjp Chrome浏览器基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_29REm81QgAyn2HPyyl0GvLxx 梯子搭建http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_15_uf02yxQIH2uV1rO0fo5_z PyCharm基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_2jTrwm3nfQ1b25SGOL1xSKsy Anaconda基本操作(被PyCharm取代)http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_38Kfp21v9A912ogkRY2_MxcX Photoshop2015基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1wguN430BQVB2m50301ldceA SVN基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1xgVgp3xFkg82m1-4y0agm2S FastStone基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1XtmU22sxQB62DEWke0Q1si9 EditPlus基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1d6UAp2ckklB2WPhk01mXX1i Eclipse维护http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1umKrT2Sik7C2mh7_h3nmLWS Xmind基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_1m1Ppn3JeA6V2XuoT93B3xCi Office基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_07RH0S1PZQTj2R-VY_1KucQu CorelDrawX6基本操作http://4d3810a1.wiz03.com/share/s/1de12x0ssAHg2vQr4b1tgYE_39eROy3TVAaf2C0_OT3UWSXN]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
</search>
